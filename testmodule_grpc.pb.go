// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: testmodule.proto

package testmodule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestmoduleSvcClient is the client API for TestmoduleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestmoduleSvcClient interface {
	TheTest(ctx context.Context, in *TheTestReq, opts ...grpc.CallOption) (*TheTestRes, error)
	SpamMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SpamMeRes, error)
}

type testmoduleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTestmoduleSvcClient(cc grpc.ClientConnInterface) TestmoduleSvcClient {
	return &testmoduleSvcClient{cc}
}

func (c *testmoduleSvcClient) TheTest(ctx context.Context, in *TheTestReq, opts ...grpc.CallOption) (*TheTestRes, error) {
	out := new(TheTestRes)
	err := c.cc.Invoke(ctx, "/testmoduleSvc/TheTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testmoduleSvcClient) SpamMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SpamMeRes, error) {
	out := new(SpamMeRes)
	err := c.cc.Invoke(ctx, "/testmoduleSvc/SpamMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestmoduleSvcServer is the server API for TestmoduleSvc service.
// All implementations must embed UnimplementedTestmoduleSvcServer
// for forward compatibility
type TestmoduleSvcServer interface {
	TheTest(context.Context, *TheTestReq) (*TheTestRes, error)
	SpamMe(context.Context, *Empty) (*SpamMeRes, error)
	mustEmbedUnimplementedTestmoduleSvcServer()
}

// UnimplementedTestmoduleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTestmoduleSvcServer struct {
}

func (UnimplementedTestmoduleSvcServer) TheTest(context.Context, *TheTestReq) (*TheTestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TheTest not implemented")
}
func (UnimplementedTestmoduleSvcServer) SpamMe(context.Context, *Empty) (*SpamMeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpamMe not implemented")
}
func (UnimplementedTestmoduleSvcServer) mustEmbedUnimplementedTestmoduleSvcServer() {}

// UnsafeTestmoduleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestmoduleSvcServer will
// result in compilation errors.
type UnsafeTestmoduleSvcServer interface {
	mustEmbedUnimplementedTestmoduleSvcServer()
}

func RegisterTestmoduleSvcServer(s grpc.ServiceRegistrar, srv TestmoduleSvcServer) {
	s.RegisterService(&TestmoduleSvc_ServiceDesc, srv)
}

func _TestmoduleSvc_TheTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestmoduleSvcServer).TheTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testmoduleSvc/TheTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestmoduleSvcServer).TheTest(ctx, req.(*TheTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestmoduleSvc_SpamMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestmoduleSvcServer).SpamMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testmoduleSvc/SpamMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestmoduleSvcServer).SpamMe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestmoduleSvc_ServiceDesc is the grpc.ServiceDesc for TestmoduleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestmoduleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testmoduleSvc",
	HandlerType: (*TestmoduleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TheTest",
			Handler:    _TestmoduleSvc_TheTest_Handler,
		},
		{
			MethodName: "SpamMe",
			Handler:    _TestmoduleSvc_SpamMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testmodule.proto",
}
